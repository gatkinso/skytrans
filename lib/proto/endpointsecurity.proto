//
//  Copyright (C) 2024 Skyloupe, LLC
// 
//  Licensed under the Apache License, Version 2.0 (the "License").
//  You may not use this file except in compliance with the License.
//  A copy of the License is located at
//  
//  https://www.apache.org/licenses/LICENSE-2.0.html
//  
//  or in the "license" file accompanying this file. This file is distributed
//  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
//  express or implied. See the License for the specific language governing
//  permissions and limitations under the License.
//

syntax = "proto3";

import "google/protobuf/timestamp.proto";
package skyloupe.skytrans;
option go_package = "transport/proto";

message Fsid {
    uint64 val1 = 1;
    uint64 val2 = 2;
}

message statfs {
    int32 f_otype = 1;                      // TEMPORARY SHADOW COPY OF f_type
    int32 f_oflags = 2;                     // TEMPORARY SHADOW COPY OF f_flags
    int64 f_bsize = 3;                      // Fundamental file system block size
    int64 f_iosize = 4;                     // Optimal transfer block size
    int64 f_blocks = 5;                     // Total data blocks in file system
    int64 f_bfree = 6;                      // Free blocks in file system
    int64 f_bavail = 7;                     // Free blocks available to non-superuser
    int64 f_files = 8;                      // Total file nodes in file system
    int64 f_ffree = 9;                      // Free file nodes in file system
    Fsid f_fsid = 10;                       // File system id
    uint32 f_owner = 11;                    // User that mounted the filesystem
    int32 f_reserved1 = 12;                 // Spare for later use
    int32 f_type = 13;                      // Type of filesystem
    int64 f_flags = 14;                     // Copy of mount exported flags
    repeated int64 f_reserved2 = 15;        // Reserved for future use (2 elements)
    
    string f_fstypename = 16;               // Filesystem type name
    string f_mntonname = 17;                // Directory on which mounted
    string f_mntfromname = 18;              // Mounted filesystem

    int32 f_reserved3 = 19;                 // For alignment
    repeated int64 f_reserved4 = 20;        // For future use (4 elements)
}

message Timeval {
    int64 tv_sec = 1;
    int64 tv_usec = 2;
}

message Timespec {
    int64 tv_sec = 1;  // seconds
    int64 tv_nsec = 2; // nanoseconds
}

message stat {
    uint64 st_dev = 1;          // Device ID containing file
    uint64 st_ino = 2;          // File serial number
    uint32 st_mode = 3;         // Mode of file
    uint32 st_nlink = 4;        // Number of hard links
    uint32 st_uid = 5;          // User ID of the file
    uint32 st_gid = 6;          // Group ID of the file
    uint64 st_rdev = 7;         // Device ID

    // Use Timespec for time fields (for systems with high resolution time)
    Timespec st_atimespec = 8;  // Time of last access
    Timespec st_mtimespec = 9;  // Time of last data modification
    Timespec st_ctimespec = 10; // Time of last status change

    int64 st_size = 11;         // File size in bytes
    int64 st_blocks = 12;       // Blocks allocated for file
    int64 st_blksize = 13;      // Optimal block size for I/O
    uint32 st_flags = 14;       // User defined flags for file
    uint32 st_gen = 15;         // File generation number

    // Reserved fields
    int32 st_lspare = 16;       // RESERVED: DO NOT USE!
    repeated int64 st_qspare = 17; // RESERVED: DO NOT USE! (2 elements)
}

message audit_token_t {
	repeated uint32 val = 1;  // max 8
}

message es_string_token_t {
    string data = 1;
}

message es_cd_hash_t {
    bytes data = 1;
}

message cpu_type_t {
    int32 value = 1;
}

message cpu_subtype_t {
    int32 value = 1;
}

message attrlist {
	uint32 bitmapcount = 1;                    /* number of attr. bit sets in list (should be 5) */
	uint32 reserved = 2;                     /* (to maintain 4-byte alignment) */
	uint32 commonattr = 3;                 /* common attribute group */
	uint32 volattr = 4;                    /* Volume attribute group */
	uint32 dirattr = 5;                    /* directory attribute group */
	uint32 fileattr = 6;                   /* file attribute group */
	uint32 forkattr = 7;                   /* fork attribute group */
};

enum es_authorization_rule_class_t {
	ES_AUTHORIZATION_RULE_CLASS_USER = 0;
	/// Right is judged by a tree of sub-rules
	ES_AUTHORIZATION_RULE_CLASS_RULE = 1;
	/// Right is judged by one or more plugins
	ES_AUTHORIZATION_RULE_CLASS_MECHANISM = 2;
	/// Right is always granted
	ES_AUTHORIZATION_RULE_CLASS_ALLOW = 3;
	/// Right is always denied
	ES_AUTHORIZATION_RULE_CLASS_DENY = 4;
	/// Right is unknown
	ES_AUTHORIZATION_RULE_CLASS_UNKNOWN = 5;
	/// Right is invalid
	ES_AUTHORIZATION_RULE_CLASS_INVALID = 6;
}

enum es_set_or_clear_t {
	ES_SET = 0;
	ES_CLEAR = 1;
}

enum es_sudo_plugin_type_t {
	ES_SUDO_PLUGIN_TYPE_UNKNOWN = 0;
	ES_SUDO_PLUGIN_TYPE_FRONT_END = 1;
	ES_SUDO_PLUGIN_TYPE_POLICY = 2;
	ES_SUDO_PLUGIN_TYPE_IO = 3;
	ES_SUDO_PLUGIN_TYPE_AUDIT = 4;
	ES_SUDO_PLUGIN_TYPE_APPROVAL = 5;
}

enum es_proc_check_type_t {
    ES_PROC_CHECK_TYPE_ZERO_UNUSED = 0;
	ES_PROC_CHECK_TYPE_LISTPIDS = 0x1;
	ES_PROC_CHECK_TYPE_PIDINFO = 0x2;
	ES_PROC_CHECK_TYPE_PIDFDINFO = 0x3;
	ES_PROC_CHECK_TYPE_KERNMSGBUF = 0x4; // deprecated, not generated
	ES_PROC_CHECK_TYPE_SETCONTROL = 0x5;
	ES_PROC_CHECK_TYPE_PIDFILEPORTINFO = 0x6;
	ES_PROC_CHECK_TYPE_TERMINATE = 0x7; // deprecated, not generated
	ES_PROC_CHECK_TYPE_DIRTYCONTROL = 0x8;
	ES_PROC_CHECK_TYPE_PIDRUSAGE = 0x9;
	ES_PROC_CHECK_TYPE_UDATA_INFO = 0xe; // deprecated, not generated
}

enum es_authentication_type_t {
	ES_AUTHENTICATION_TYPE_OD = 0;
	ES_AUTHENTICATION_TYPE_TOUCHID = 1;
	ES_AUTHENTICATION_TYPE_TOKEN = 2;
	ES_AUTHENTICATION_TYPE_AUTO_UNLOCK = 3;
	// ES_AUTHENTICATION_TYPE_LAST is not a valid type of authentication
	// but is a convenience value to operate on the range of defined
	// authentication types.
	ES_AUTHENTICATION_TYPE_LAST = 4;
}

enum es_address_type_t {
	/// No source address available.
	ES_ADDRESS_TYPE_NONE = 0;
	/// Source address is IPv4.
	ES_ADDRESS_TYPE_IPV4 = 1;
	/// Source address is IPv6.
	ES_ADDRESS_TYPE_IPV6 = 2;
	/// Source address is named UNIX socket.
	ES_ADDRESS_TYPE_NAMED_SOCKET = 3;
}

message es_file_t {
    es_string_token_t path = 1;
    bool path_truncated = 2;
    stat stat = 3;
}

enum es_destination_type_t {
	ES_DESTINATION_TYPE_EXISTING_FILE = 0;
	ES_DESTINATION_TYPE_NEW_PATH = 1;
}

message es_acl_t {

}

message es_thread_t {
    uint64 thread_id = 1;
}

message es_event_access_t {
    int32 mode = 1;
    es_file_t target = 2;
    bytes reserved = 3;
}

message es_event_id_t {
    bytes reserved = 1;
}

enum es_auth_result_t {
    ES_AUTH_RESULT_ALLOW = 0;
    ES_AUTH_RESULT_DENY = 1;
}

message es_signed_file_info_t {
    es_cd_hash_t cdhash = 1;
    string signing_id = 2;
    string team_id = 3;
}

message es_process_t {
    audit_token_t audit_token = 1;
    int32 ppid = 2;
    int32 original_ppid = 3;
    int32 group_id = 4;
    int32 session_id = 5;
    uint32 codesigning_flags = 6;
    bool is_platform_binary = 7;
    bool is_es_client = 8;
    es_cd_hash_t cdhash = 9;
    es_string_token_t signing_id = 10;
    es_string_token_t team_id = 11;
    es_file_t executable = 12;
    es_file_t tty = 13;
    Timeval start_time = 14;
    audit_token_t responsible_audit_token = 15;
    audit_token_t parent_audit_token = 16;
}

message es_thread_state_t {
    int32 flavor = 1;
    es_string_token_t state = 2;
}

message es_fd_t {
    int32 fd = 1;
    uint32 fdtype = 2;
    oneof fd_union {
        uint64 pipe_id = 3;
    }
}

enum es_btm_item_type {
    ES_BTM_ITEM_TYPE_USER_ITEM = 0;
    ES_BTM_ITEM_TYPE_APP = 1;
    ES_BTM_ITEM_TYPE_LOGIN_ITEM = 2;
    ES_BTM_ITEM_TYPE_AGENT = 3;
    ES_BTM_ITEM_TYPE_DAEMON = 4;
}

message es_btm_launch_item_t {
    es_btm_item_type item_type = 1;
    bool legacy = 2;
    bool managed = 3;
    uint32 uid = 4;
    es_string_token_t item_url = 5;
    es_string_token_t app_url = 6;
}

enum es_profile_source {
    ES_PROFILE_SOURCE_MANAGED = 0;
    ES_PROFILE_SOURCE_INSTALL = 1;
}

message es_profile_t {
    es_string_token_t identifier = 1;
    es_string_token_t uuid = 2;
    es_profile_source install_source = 3;
    es_string_token_t organization = 4;
    es_string_token_t display_name = 5;
    es_string_token_t scope = 6;
}

message es_event_exec_t {
    es_process_t target = 1;
    es_string_token_t dyld_exec_path = 2;
    oneof exec_union {
        es_file_t script = 3;
        es_file_t cwd = 4;
        int32 last_fd = 5;
        cpu_type_t image_cpu_type_t = 6;
        cpu_subtype_t image_cpu_subtype_t = 7;
    }
}

message es_event_open_t {
    int32 fflag = 1;
    es_file_t file = 2;
}

message es_event_kextload_t {
    es_string_token_t identifier = 1;
}

message es_event_kextunload_t {
    es_string_token_t identifier = 1;
}

message es_event_unlink_t {
    es_file_t target = 1;
    es_file_t parent_dir = 2;
}

message es_event_mmap_t {
    int32 protection = 1;
    int32 max_protection = 2;
    int32 flags = 3;
    uint64 file_pos = 4;
    es_file_t source = 5;
}

message es_event_link_t {
    es_file_t source = 1;
    es_file_t target_dir = 2;
    es_string_token_t target_filename = 3;
}

enum es_mount_disposition_t {
    ES_MOUNT_DISPOSITION_EXTERNAL = 0;
    ES_MOUNT_DISPOSITION_INTERNAL = 1;
    ES_MOUNT_DISPOSITION_NETWORK = 2;
    ES_MOUNT_DISPOSITION_VIRTUAL = 3;
    ES_MOUNT_DISPOSITION_NULLFS = 4;
    ES_MOUNT_DISPOSITION_UNKNOWN = 5;
}

message es_event_mount_t {
    statfs statfs = 1;
    es_mount_disposition_t disposition = 2;
}

message es_event_unmount_t {
    statfs statfs = 1;
}

message es_event_remount_t {
    statfs statfs = 1;
    uint64 remount_flags = 2;
    es_mount_disposition_t disposition = 3;
}

message es_event_fork_t {
    es_process_t child = 1;
}

message es_event_mprotect_t {
    int32 protection = 1;
    uint64 address = 2;
    uint64 size = 3;
}

message es_event_signal_t {
    int32 sig = 1;
    es_process_t target = 2;
}

message es_event_rename_t {
    es_file_t source = 1;
    es_destination_type_t destination_type = 2;
    oneof destination {
        es_file_t existing_file = 3;
        es_new_path_t new_path = 4;
    }
}

message es_new_path_t {
    es_file_t dir = 1;
    es_string_token_t filename = 2;
}

message es_event_setextattr_t {
    es_file_t target = 1;
    es_string_token_t extattr = 2;
}

message es_event_getextattr_t {
    es_file_t target = 1;
    es_string_token_t extattr = 2;
}

message es_event_deleteextattr_t {
    es_file_t target = 1;
    es_string_token_t extattr = 2;
}

message es_event_setmode_t {
    int32 mode = 1;
    es_file_t target = 2;
}

message es_event_setflags_t {
    uint32 flags = 1;
    es_file_t target = 2;
}

message es_event_setowner_t {
    uint32 uid = 1;
    uint32 gid = 2;
    es_file_t target = 3;
}

message es_event_close_t {
    bool modified = 1;
    es_file_t target = 2;
    bool was_mapped_writable = 3; // Field available if message version >= 6
}

message es_event_create_t {
    es_destination_type_t destination_type = 1;
    oneof destination {
        es_file_t existing_file = 2;
        es_new_path_t new_path = 3;
    }
    es_acl_t acl = 4; // Field available if message version >= 2
}

message es_event_exit_t {
    int32 stat = 1;
}

message es_event_write_t {
    es_file_t target = 1;
}

message es_event_truncate_t {
    es_file_t target = 1;
}

message es_event_chdir_t {
    es_file_t target = 1;
}

message es_event_stat_t {
    es_file_t target = 1;
}

message es_event_chroot_t {
    es_file_t target = 1;
}

message es_event_listextattr_t {
    es_file_t target = 1;
}

message es_event_iokit_open_t {
    uint32 user_client_type = 1;
    es_string_token_t user_client_class = 2;
}

enum es_get_task_type_t {
    ES_GET_TASK_TYPE_TASK_FOR_PID = 0;
    ES_GET_TASK_TYPE_EXPOSE_TASK = 1;
    ES_GET_TASK_TYPE_IDENTITY_TOKEN = 2;
}

message es_event_get_task_t {
    es_process_t target = 1;
    es_get_task_type_t type = 2; // Field available if message version >= 5
}

message es_event_get_task_read_t {
    es_process_t target = 1;               // The process associated with the event
    es_event_get_task_t type = 2;             // Type indicating how the task port is obtained (available if message version >= 5)
}

message es_event_get_task_inspect_t {
    es_process_t target = 1;               // The process for which the task inspect port will be retrieved
    es_event_get_task_t type = 2;             // Type indicating how the task port is obtained (available if message version >= 5)
}

message es_event_get_task_name_t {
    es_process_t target = 1;               // The process for which the task name port will be retrieved
    es_event_get_task_t type = 2;             // Type indicating how the task port is obtained (available if message version >= 5)
}

message es_event_getattrlist_t {
    attrlist attrlist = 1; // Define attrlist structure as needed
    es_file_t target = 2;
}

message es_event_setattrlist_t {
    attrlist attrlist = 1;
    es_file_t target = 2;
}

message es_event_file_provider_update_t {
    es_file_t source = 1;
    es_string_token_t target_path = 2;
}

message es_event_file_provider_materialize_t {
    es_process_t instigator = 1;
    es_file_t source = 2;
    es_file_t target = 3;
    audit_token_t instigator_token = 4; // Available in message version >= 8
}

message es_event_readlink_t {
    es_file_t source = 1;
}

message es_event_lookup_t {
    es_file_t source_dir = 1;
    es_string_token_t relative_target = 2;
}

message es_event_utimes_t {
    es_file_t target = 1;
    Timespec atime = 2;
    Timespec mtime = 3;
}

message es_event_clone_t {
    es_file_t source = 1;
    es_file_t target_dir = 2;
    es_string_token_t target_name = 3;
}

message es_event_copyfile_t {
    es_file_t source = 1;
    es_file_t target_file = 2;
    es_file_t target_dir = 3;
    es_string_token_t target_name = 4;
    int32 mode = 5;
    int32 flags = 6;
}

message es_event_fcntl_t {
    es_file_t target = 1;
    int32 cmd = 2;
}

message es_event_readdir_t {
    es_file_t target = 1;
}

message es_event_fsgetpath_t {
    es_file_t target = 1;
}

message es_event_settime_t {
    // Placeholder for event fields if needed
}

message es_event_dup_t {
    es_file_t target = 1;
}

message es_event_uipc_bind_t {
    es_file_t dir = 1;
    es_string_token_t filename = 2;
    int32 mode = 3;
}

message es_event_uipc_connect_t {
    es_file_t file = 1;
    int32 domain = 2;
    int32 type = 3;
    int32 protocol = 4;
    bytes reserved = 5;  // reserved[64]
}

message es_event_setacl_t {
    es_file_t target = 1;
    es_set_or_clear_t set_or_clear = 2;
    oneof acl {
        es_acl_t set = 3;  // Replace es_acl_t with the actual type if needed
    }
    bytes reserved = 4;  // reserved[64]
}

message es_event_pty_grant_t {
    int64 dev = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_pty_close_t {
    int64 dev = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_proc_check_t {
    es_process_t target = 1;
    es_proc_check_type_t type = 2;
    int32 flavor = 3;
    bytes reserved = 4;  // reserved[64]
}

message es_event_searchfs_t {
    attrlist attrlist = 1;  // Define attrlist structure as needed
    es_file_t target = 2;
    bytes reserved = 3;  // reserved[64]
}

enum es_proc_suspend_resume_type_t {
    ES_PROC_SUSPEND_RESUME_TYPE_SUSPEND = 0;
    ES_PROC_SUSPEND_RESUME_TYPE_RESUME = 1;
    ES_PROC_SUSPEND_RESUME_TYPE_SHUTDOWN_SOCKETS = 3;
}

message es_event_proc_suspend_resume_t {
    es_process_t target = 1;
    es_proc_suspend_resume_type_t type = 2;
    bytes reserved = 3;  // reserved[64]
}

message es_event_cs_invalidated_t {
    bytes reserved = 1;  // reserved[64]
}

message es_event_trace_t {
    es_process_t target = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_remote_thread_create_t {
    es_process_t target = 1;
    es_thread_state_t thread_state = 2;  // thread_state is nullable
    bytes reserved = 3;  // reserved[64]
}

message es_event_setuid_t {
    uint32 uid = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_setgid_t {
    uint32 gid = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_seteuid_t {
    uint32 euid = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_setegid_t {
    uint32 egid = 1;
    bytes reserved = 2;  // reserved[64]
}

message es_event_setreuid_t {
    uint32 ruid = 1;
    uint32 euid = 2;
    bytes reserved = 3;  // reserved[64]
}

message es_event_setregid_t {
    uint32 rgid = 1;
    uint32 egid = 2;
    bytes reserved = 3;  // reserved[64]
}

message es_event_authentication_od_t {
    es_process_t instigator = 1;
    es_string_token_t record_type = 2;
    es_string_token_t record_name = 3;
    es_string_token_t node_name = 4;
    es_string_token_t db_path = 5;
    audit_token_t instigator_token = 6;  // Available in message versions >= 8
}

enum es_touchid_mode_t {
    ES_TOUCHID_MODE_VERIFICATION = 0;
    ES_TOUCHID_MODE_IDENTIFICATION = 1;
}

message es_event_authentication_touchid_t {
    es_process_t instigator = 1;
    es_touchid_mode_t touchid_mode = 2;
    bool has_uid_flag = 3; // renamed from has_uid_flag to prevent colliion with generated code function name
    oneof uid_union {
        uint32 uid = 4;
    }
    audit_token_t instigator_token = 5;  // Available in message versions >= 8
}

message es_event_authentication_token_t {
    es_process_t instigator = 1;
    es_string_token_t pubkey_hash = 2;
    es_string_token_t token_id = 3;
    es_string_token_t kerberos_principal = 4;
    audit_token_t instigator_token = 5;  // Available in message versions >= 8
}

enum es_auto_unlock_type_t {
    ES_AUTO_UNLOCK_MACHINE_UNLOCK = 0;
    ES_AUTO_UNLOCK_AUTH_PROMPT = 1;
}

message es_event_authentication_auto_unlock_t {
    es_string_token_t username = 1;
    es_auto_unlock_type_t type = 2;
}

message es_event_authentication_t {
    bool success = 1;
    es_authentication_type_t type = 2;
    oneof data {
        es_event_authentication_od_t od = 3;
        es_event_authentication_touchid_t touchid = 4;
        es_event_authentication_token_t token = 5;
        es_event_authentication_auto_unlock_t auto_unlock = 6;
    }
}

message es_event_xp_malware_detected_t {
    es_string_token_t signature_version = 1;
    es_string_token_t malware_identifier = 2;
    es_string_token_t incident_identifier = 3;
    es_string_token_t detected_path = 4;
}

message es_event_xp_malware_remediated_t {
    es_string_token_t signature_version = 1;
    es_string_token_t malware_identifier = 2;
    es_string_token_t incident_identifier = 3;
    es_string_token_t action_type = 4;
    bool success = 5;
    es_string_token_t result_description = 6;
    es_string_token_t remediated_path = 7;
    audit_token_t remediated_process_audit_token = 8;  // nullable
}

message uint32 {
    uint32 graphical_session_id = 1;
}

message es_event_lw_session_login_t {
    es_string_token_t username = 1;
    uint32 graphical_session_id = 2;
}

message es_event_lw_session_logout_t {
    es_string_token_t username = 1;
    uint32 graphical_session_id = 2;
}

message es_event_lw_session_lock_t {
    es_string_token_t username = 1;
    uint32 graphical_session_id = 2;
}

message es_event_lw_session_unlock_t {
    es_string_token_t username = 1;
    uint32 graphical_session_id = 2;
}

message es_event_screensharing_attach_t {
    bool success = 1;
    es_address_type_t source_address_type = 2;
    es_string_token_t source_address = 3;
    es_string_token_t viewer_appleid = 4;
    es_string_token_t authentication_type = 5;
    es_string_token_t authentication_username = 6;
    es_string_token_t session_username = 7;
    bool existing_session = 8;
    uint32 graphical_session_id = 9;
}

message es_event_screensharing_detach_t {
    es_address_type_t source_address_type = 1;
    es_string_token_t source_address = 2;
    es_string_token_t viewer_appleid = 3;
    uint32 graphical_session_id = 4;
}

enum es_openssh_login_result_type_t {
    ES_OPENSSH_LOGIN_EXCEED_MAXTRIES = 0;
    ES_OPENSSH_LOGIN_ROOT_DENIED = 1;
    ES_OPENSSH_AUTH_SUCCESS = 2;
    ES_OPENSSH_AUTH_FAIL_NONE = 3;
    ES_OPENSSH_AUTH_FAIL_PASSWD = 4;
    ES_OPENSSH_AUTH_FAIL_KBDINT = 5;
    ES_OPENSSH_AUTH_FAIL_PUBKEY = 6;
    ES_OPENSSH_AUTH_FAIL_HOSTBASED = 7;
    ES_OPENSSH_AUTH_FAIL_GSSAPI = 8;
    ES_OPENSSH_INVALID_USER = 9;
}

message es_event_openssh_login_t {
    bool success = 1;
    es_openssh_login_result_type_t result_type = 2;
    es_address_type_t source_address_type = 3;
    es_string_token_t source_address = 4;
    es_string_token_t username = 5;
    bool has_uid_flag = 6;
    oneof uid_union {
        uint32 uid = 7;
    }
}

message es_event_openssh_logout_t {
    es_address_type_t source_address_type = 1;
    es_string_token_t source_address = 2;
    es_string_token_t username = 3;
    uint32 uid = 4;
}

message es_event_login_login_t {
    bool success = 1;
    es_string_token_t failure_message = 2;
    es_string_token_t username = 3;
    bool has_uid_flag = 4;
    oneof uid_union {
        uint32 uid = 5;
    }
}

message es_event_login_logout_t {
    es_string_token_t username = 1;
    uint32 uid = 2;
}

message es_event_btm_launch_item_add_t {
    es_process_t instigator = 1;
    es_process_t app = 2;
    es_btm_launch_item_t item = 3;  // Replace with the actual definition of es_btm_launch_item_t
    es_string_token_t executable_path = 4;
    audit_token_t instigator_token = 5;  // Nullable, available in message versions >= 8
    audit_token_t app_token = 6;         // Nullable, available in message versions >= 8
}

message es_event_btm_launch_item_remove_t {
    es_process_t instigator = 1;
    es_process_t app = 2;
    es_btm_launch_item_t item = 3;  // Replace with the actual definition of es_btm_launch_item_t
    audit_token_t instigator_token = 4;  // Nullable, available in message versions >= 8
    audit_token_t app_token = 5;         // Nullable, available in message versions >= 8
}

message es_event_su_t {
    bool success = 1;
    es_string_token_t failure_message = 2;
    uint32 from_uid = 3;
    es_string_token_t from_username = 4;
    bool has_to_uid_flag = 5;  //rename to prevent collision with generated code
    oneof to_uid_union {
        uint32 to_uid = 6;
    }
    es_string_token_t to_username = 7;
    es_string_token_t shell = 8;
    repeated es_string_token_t argv = 9;
    repeated es_string_token_t env = 10;
}

message es_sudo_reject_info {
    es_string_token_t plugin_name = 1;
    es_sudo_plugin_type_t plugin_type = 2;  // Define es_sudo_plugin_type_t as needed
    es_string_token_t failure_message = 3;
}

message es_event_sudo_t {
    bool success = 1;
    es_event_sudo_t reject_info = 2;  // Nullable
    bool has_from_uid_flag = 3;  //renamed to prevent name collision with generated code
    oneof from_uid_union {
        uint32 from_uid = 4;
    }
    es_string_token_t from_username = 5;
    bool has_to_uid_flag = 6;
    oneof to_uid_union {
        uint32 to_uid = 7;
    }
    es_string_token_t to_username = 8;
    es_string_token_t command = 9;
}

message es_event_profile_add_t {
    es_process_t instigator = 1;  // Nullable
    bool is_update = 2;
    es_profile_t profile = 3;  // Define es_profile_t as needed
    audit_token_t instigator_token = 4;  // Available in message versions >= 8
}

message es_event_profile_remove_t {
    es_process_t instigator = 1;  // Nullable
    es_profile_t profile = 2;     // Define es_profile_t as needed
    audit_token_t instigator_token = 3;  // Available in message versions >= 8
}

message es_event_authorization_petition_t {
    es_process_t instigator = 1;  // Nullable
    es_process_t petitioner = 2;  // Nullable
    uint32 flags = 3;
    repeated es_string_token_t rights = 4;  // Array of rights
    audit_token_t instigator_token = 5;    // Available in message versions >= 8
    audit_token_t petitioner_token = 6;    // Available in message versions >= 8
}

message es_authorization_result_t {
    es_string_token_t right_name = 1;
    es_authorization_rule_class_t rule_class = 2;  // Define es_authorization_rule_class_t as needed
    bool granted = 3;
}

message es_event_authorization_judgement_t {
    es_process_t instigator = 1;  // Nullable
    es_process_t petitioner = 2;  // Nullable
    int32 return_code = 3;
    repeated es_authorization_result_t results = 4;
    audit_token_t instigator_token = 5;  // Available in message versions >= 8
    audit_token_t petitioner_token = 6;  // Available in message versions >= 8
}

// Define common types
message es_od_member_id_t {
    enum MemberType {
        UUID = 0;
        NAME = 1;
    }

    MemberType member_type = 1;
    oneof member_value {
        string uuid = 2;
        string name = 3;
    }
}

message es_od_member_id_array_t {
    enum MemberType {
        UUID = 0;
        NAME = 1;
    }

    MemberType member_type = 1;
    uint32 member_count = 2;
    oneof member_array {
        es_string_token_t uuids = 3; // GJA
        es_string_token_t names = 4; // GJA
    }
}

message es_event_od_group_add_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string group_name = 3;
    es_od_member_id_t member = 4;
    string node_name = 5;
    string db_path = 6;
    audit_token_t instigator_token = 7;
}

message es_event_od_group_remove_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string group_name = 3;
    es_od_member_id_t member = 4;
    string node_name = 5;
    string db_path = 6;
    audit_token_t instigator_token = 7;
}

message es_event_od_group_set_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string group_name = 3;
    es_od_member_id_array_t members = 4;
    string node_name = 5;
    string db_path = 6;
    audit_token_t instigator_token = 7;
}

message es_event_od_modify_password_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string account_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_od_disable_user_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string user_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_od_enable_user_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string user_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_od_attribute_value_add_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string record_name = 3;
    string attribute_name = 4;
    string attribute_value = 5;
    string node_name = 6;
    string db_path = 7;
    audit_token_t instigator_token = 8;
}

message es_event_od_attribute_value_remove_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string record_name = 3;
    string attribute_name = 4;
    string attribute_value = 5;
    string node_name = 6;
    string db_path = 7;
    audit_token_t instigator_token = 8;
}

message es_event_od_attribute_set_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string record_name = 3;
    string attribute_name = 4;
    uint32 attribute_value_count = 5;
    repeated string attribute_values = 6;
    string node_name = 7;
    string db_path = 8;
    audit_token_t instigator_token = 9;
}

message es_event_od_create_user_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string user_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_od_create_group_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string group_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_od_delete_user_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string user_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_od_delete_group_t {
    es_process_t instigator = 1;
    int32 error_code = 2;
    string group_name = 3;
    string node_name = 4;
    string db_path = 5;
    audit_token_t instigator_token = 6;
}

message es_event_xpc_connect_t {
    string service_name = 1;
    string service_domain_type = 2;
}

message es_event_gatekeeper_user_override_t {
    string file_path = 1;
    es_file_t file = 2;
    string sha256 = 3;
    es_signed_file_info_t signing_info = 4;
}

message es_result_t {
    enum ResultType {
        AUTH_RESULT = 0;
        FLAGS_RESULT = 1;
        RESERVED_RESULT = 2;
    }

    ResultType result_type = 1;
    oneof result {
        es_auth_result_t auth = 2;
        uint32 flags = 3;
        bytes reserved = 4;
    }
}

message es_events_t {
    oneof event {
        es_event_access_t access = 1;
        es_event_chdir_t chdir = 2;
        es_event_chroot_t chroot = 3;
        es_event_clone_t clone = 4;
        es_event_close_t close = 5;
        es_event_copyfile_t copyfile = 6;
        es_event_create_t create = 7;
        es_event_cs_invalidated_t cs_invalidated = 8;
        es_event_deleteextattr_t deleteextattr = 9;
        es_event_dup_t dup = 10;
        es_event_truncate_t exchangedat = 11;
        es_event_exec_t exec = 12;
        es_event_exit_t exit = 13;
        es_event_file_provider_materialize_t file_provider_materialize = 14;
        es_event_file_provider_update_t file_provider_update = 15;
        es_event_fcntl_t fcntl = 16;
        es_event_fork_t fork = 17;
        es_event_fsgetpath_t fsgetpath = 18;
        es_event_get_task_t get_task = 19;
        es_event_get_task_read_t get_task_read = 20;
        es_event_get_task_inspect_t get_task_inspect = 21;
        es_event_get_task_name_t get_task_name = 22;
        es_event_getattrlist_t getattrlist = 23;
        es_event_getextattr_t getextattr = 24;
        es_event_iokit_open_t iokit_open = 25;
        es_event_kextload_t kextload = 26;
        es_event_kextunload_t kextunload = 27;
        es_event_link_t link = 28;
        es_event_listextattr_t listextattr = 29;
        es_event_lookup_t lookup = 30;
        es_event_mmap_t mmap = 31;
        es_event_mount_t mount = 32;
        es_event_mprotect_t mprotect = 33;
        es_event_open_t open = 34;
        es_event_proc_check_t proc_check = 35;
        es_event_proc_suspend_resume_t proc_suspend_resume = 36;
        es_event_pty_close_t pty_close = 37;
        es_event_pty_grant_t pty_grant = 38;
        es_event_readdir_t readdi = 39;
        es_event_readlink_t readlink = 40;
        es_event_remote_thread_create_t remote_thread_create = 41;
        es_event_remount_t remount = 42;
        es_event_rename_t rename = 43;
        es_event_searchfs_t searchfs = 44;
        es_event_setacl_t setacl = 45;
        es_event_setattrlist_t setattrlist = 46;
        es_event_setextattr_t setextattr = 47;
        es_event_setflags_t setflags = 48;
        es_event_setmode_t setmode = 49;
        es_event_setowner_t setowner = 50;
        es_event_settime_t settime = 51;
        es_event_setuid_t setuid = 52;
        es_event_setgid_t setgid = 53;
        es_event_seteuid_t seteuid = 54;
        es_event_setegid_t setegid = 55;
        es_event_setreuid_t setreuid = 56;
        es_event_setregid_t setregid = 57;
        es_event_signal_t signal = 58;
        es_event_stat_t stat = 59;
        es_event_trace_t trace = 60;
        es_event_truncate_t truncate = 61;
        es_event_uipc_bind_t uipc_bind = 62;
        es_event_uipc_connect_t uipc_connect = 63;
        es_event_unlink_t unlink = 64;
        es_event_unmount_t unmount = 65;
        es_event_utimes_t utimes = 66;
        es_event_write_t write = 67;

        /**
        * Events added in macOS 13.0 or later use nonnull pointers.
        */
        es_event_authentication_t authentication = 68;
        es_event_xp_malware_detected_t xp_malware_detected = 69;
        es_event_xp_malware_remediated_t xp_malware_remediated = 70;
        es_event_lw_session_login_t lw_session_login = 71;
        es_event_lw_session_logout_t lw_session_logout = 72;
        es_event_lw_session_lock_t lw_session_lock = 73;
        es_event_lw_session_unlock_t lw_session_unlock = 74;
        es_event_screensharing_attach_t screensharing_attach = 75;
        es_event_screensharing_detach_t screensharing_detach = 76;
        es_event_openssh_login_t openssh_login = 77;
        es_event_openssh_logout_t openssh_logou = 78;
        es_event_login_login_t login_login = 79;
        es_event_login_logout_t login_logout = 80;
        es_event_btm_launch_item_add_t btm_launch_item_add = 81;
        es_event_btm_launch_item_remove_t btm_launch_item_remove = 82;
        es_event_profile_add_t profile_add = 83;
        es_event_profile_remove_t profile_remove = 84;
        es_event_su_t su = 85;
        es_event_authorization_petition_t authorization_petition = 86;
        es_event_authorization_judgement_t authorization_judgement = 87;
        es_event_sudo_t sudo = 88;
        es_event_od_group_add_t od_group_add = 89;
        es_event_od_group_remove_t od_group_remove = 90;
        es_event_od_group_set_t od_group_set = 91;
        es_event_od_modify_password_t od_modify_password = 92;
        es_event_od_disable_user_t od_disable_user = 93;
        es_event_od_enable_user_t od_enable_user = 94;
        es_event_od_attribute_value_add_t od_attribute_value_add = 95;
        es_event_od_attribute_value_remove_t od_attribute_value_remove = 96;
        es_event_od_attribute_set_t od_attribute_set = 97;
        es_event_od_create_user_t od_create_user = 98;
        es_event_od_create_group_t od_create_group = 99;
        es_event_od_delete_user_t od_delete_user = 100;
        es_event_od_delete_group_t od_delete_group = 101;
        es_event_xpc_connect_t xpc_connect = 102;
        es_event_gatekeeper_user_override_t gatekeeper_user_override = 103;
    }
}

message es_message_t {
    uint32 version = 1;
    google.protobuf.Timestamp time = 2;
    uint64 mach_time = 3;
    uint64 deadline = 4;
    es_process_t process = 5;
    uint64 seq_num = 6;
    string action_type = 7;
    oneof action {
        es_event_id_t auth = 8;
        es_result_t notify = 9;
    }
    string event_type = 10;
    es_events_t event = 11;
    es_thread_t thread = 12;
    uint64 global_seq_num = 13;
    repeated uint64 opaque = 14;
}




/////////////////////////////////////

message es_process_tO {
    uint64 global_sequence_num = 1;

    uint32 pid = 2;
    uint32 ppid = 3;
    uint32 start_time = 4;
    uint64 start_time_ms = 5;
    string pathname = 6;
    bool discovered = 7;
    uint64 parent_start_time = 8;
    uint64 parent_start_time_ms = 9;
}

message Script {
    string path = 1;
}

message EsExec {
    es_process_t target = 1;
    Script script = 2;
}

message EsFork {
    es_process_t child = 1;
}

message EsExit {
    uint64 global_sequence_num = 1;
    uint32 stat = 2;
    uint64 exit_time_ms = 3;
}

message EsEvent {
    uint64 global_sequence_num = 1;
    uint32 event_type = 2;

    es_process_t process = 50;

    EsExec exec = 100;
    EsFork fork = 101;
    EsExit exit = 102;
}